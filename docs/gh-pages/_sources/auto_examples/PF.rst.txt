
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/PF.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_PF.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_PF.py:


Particle Filter Example
========================

.. GENERATED FROM PYTHON SOURCE LINES 6-133



.. image-sg:: /auto_examples/images/sphx_glr_PF_001.png
   :alt: PF
   :srcset: /auto_examples/images/sphx_glr_PF_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Progress:   0%|          | 0/9 [00:00<?, ?it/s]    Progress:   0%|          | 0/9 [00:01<?, ?it/s]    Progress:  11%|#1        | 1/9 [00:03<00:20,  2.61s/it]    Progress:  33%|###3      | 3/9 [00:03<00:04,  1.33it/s]    Progress:  56%|#####5    | 5/9 [00:04<00:01,  2.49it/s]    Progress:  78%|#######7  | 7/9 [00:04<00:00,  3.70it/s]    Progress: 100%|##########| 9/9 [00:04<00:00,  5.11it/s]    Progress: 100%|##########| 9/9 [00:04<00:00,  2.03it/s]
    Time Elapsed: 4.430014610290527
    Progress:   0%|          | 0/9 [00:00<?, ?it/s]    Progress:   0%|          | 0/9 [00:00<?, ?it/s]    Progress:  11%|#1        | 1/9 [00:06<00:45,  5.69s/it]    Progress:  22%|##2       | 2/9 [00:11<00:37,  5.29s/it]    Progress:  33%|###3      | 3/9 [00:17<00:33,  5.52s/it]    Progress:  44%|####4     | 4/9 [00:20<00:23,  4.76s/it]    Progress:  56%|#####5    | 5/9 [00:25<00:18,  4.75s/it]    Progress:  67%|######6   | 6/9 [00:30<00:14,  4.87s/it]    Progress:  78%|#######7  | 7/9 [00:35<00:09,  4.75s/it]    Progress:  89%|########8 | 8/9 [00:39<00:04,  4.50s/it]    Progress: 100%|##########| 9/9 [00:42<00:00,  4.10s/it]    Progress: 100%|##########| 9/9 [00:42<00:00,  4.72s/it]
    Time Elapsed: 42.493728160858154






|

.. code-block:: default
   :lineno-start: 7


    import os
    import sys
    import time
    import copy
    import matplotlib.pyplot as plt
    import matplotlib
    import numpy as np
    from scipy.integrate import solve_ivp
    from StatOD.data import get_example8_measurements, get_measurements
    from StatOD.dynamics import *
    from StatOD.filters import *
    from StatOD.measurements import *
    from StatOD.rotations import ECI_2_RCI
    from StatOD.utils import ECEF_2_ECI, latlon2cart
    from StatOD.visualizations import *
    from StatOD.constants import * 

    np.random.seed(1234)



    def main():
   
        ######################
        ## Get Measurements ##
        ######################
        numba = True
        t, Y, x_truth, y_truth = get_example8_measurements(case=1)

        t0 = t[0]
        M_end = len(t) // 5

        t = t[:M_end]
        Y = Y[:M_end]

        ######################
        ## Set Parameters   ##
        ######################
        k = 1
        eta = 1000
        L = 5000 # particles

        ##############################
        ## Set State and Covariance ##
        ##############################

        x0 = np.array([0.0, 1.0])
        dx0 = np.array([0.0, 0.0])
        x0 += dx0

        P_diag = np.array(
            [0.2, 0.2]
        )**2
        R_diag = np.array([0.1]) ** 2

        P_0 = np.diag(P_diag)
        R0 = np.diag(R_diag)

        R_vec = np.full((len(t), R0.shape[0], R0.shape[1]), R0)

        ########################
        ## Configure Dynamics ##
        ########################

        c_args = np.array([k, eta])
        f, dfdx = dynamics(x0, f_spring_duffing, c_args, use_numba=numba)

        h_args = np.array([])
        h, dhdx = measurements(x0, spring_observation_1, h_args)

        Q_args = []
        Q0 = np.eye(2) * 1e-1 ** 2
        Q_fcn = process_noise(x0, Q0, get_Q, Q_args, use_numba=False)

        ######################
        ## Configure Filter ##
        ######################

        # Initialize
        f_dict = {
            "f": f,
            "dfdx": dfdx,
            "f_args": c_args,
            "Q_fcn": Q_fcn,
            "Q": Q0,
            "Q_args": Q_args,
        }

        h_dict = {"h": h, 
                  "dhdx": dhdx,
                  "h_args": h_args,
                  }

        start_time = time.time()
        logger = FilterLogger(len(x0), len(t))
        filter = ExtendedKalmanFilter(t0, x0, dx0, P_0, f_dict, h_dict, logger=logger)
        filter.run(t, Y, R_vec, np.full(len(t), None), np.empty((len(t),0)))

        print("Time Elapsed: " + str(time.time() - start_time))


        ###############################
        ## Configure Particle Filter ##
        ###############################
        x_0_k = np.random.uniform(-2,2,size=(L,2))

        start_time = time.time()
        logger = FilterLogger(len(x0), len(t))
        filter = ParticleFilter(t0, x_0_k, f_dict, h_dict, logger=logger)
        filter.run(t, Y, R_vec, np.full(len(t), None), np.empty((len(t),0)))

        print("Time Elapsed: " + str(time.time() - start_time))

        ##############
        ## Plotting ##
        ##############


        plt.figure()
        plt.scatter(filter.x_i_m1[:,0], filter.x_i_m1[:,1], s=2)
        plt.ylabel(r"$\dot{x}$")
        plt.xlabel(r"$x$")
        plt.show()


    if __name__ == "__main__":
        main()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  50.090 seconds)


.. _sphx_glr_download_auto_examples_PF.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: PF.py <PF.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: PF.ipynb <PF.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
